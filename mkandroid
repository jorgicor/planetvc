#!/bin/sh

# Copyright (c) 2016-2017 Jorge Giner Cordero
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

.rc.o:

TARGET=android-22
APPID="953069141779"

case $# in
	4) BUILDTYPE="$1" ; VERSIONCODE=$2 ; VERSIONNAME=$3 ; SDLPATH="$4" ;;
	*) echo "Usage ./mkandroid full|demo versionCode versionName path_to_sdl_sources" ; exit 1 ;;
esac

case "$BUILDTYPE" in
    full)
	APP="org.jorgicor.planetvc"
	APPNAME="Planet of Vicious Creatures"
	DEMOPP=""
	ICONSUFFIX=""
        ;; 
    demo)
	APP="org.jorgicor.planetvcd"
	APPNAME="Planet of Vicious Creatures DM"
	DEMOPP="-DPP_DEMO=1"
	ICONSUFFIX="d"
        ;;
    *) echo "Usage ./mkandroid full|demo versionCode versionName path_to_sdl_sources" ; exit 1 ;;
esac

if [ ! -d $SDLPATH ]; then
	echo "Can't find $SDLPATH."
	exit 1
fi

NDKBUILD=`which ndk-build`
if [ -z "$NDKBUILD" ];then
    echo "Could not find the ndk-build utility, install Android's NDK and add it to the path"
    exit 1
fi

ANDROID=`which android`
if [ -z "$ANDROID" ];then
    echo "Could not find the android utility, install Android's SDK and add it to the path"
    exit 1
fi

ANT=`which ant`
if [ -z "$ANT" ];then
    echo "Could not find the ant utility, install Android's SDK and add it to the path"
    exit 1
fi

PKGPATH="$( cd "$(dirname "$0")" ; pwd -P )"
PKGFILESDIR="$PKGPATH"/pkgfiles

NCPUS="1"
case "$OSTYPE" in
    darwin*)
        NCPU=`sysctl -n hw.ncpu`
        ;; 
    linux*)
        if [ -n `which nproc` ]; then
            NCPUS=`nproc`
        fi  
        ;;
  *);;
esac

SDLPATH="$( cd "$SDLPATH" ; pwd -P )"
BASEPATH=`pwd -P`
BUILDPATH="$BASEPATH"/'android.build.'"$BUILDTYPE"

make_project () {
	local name
	local sources
	local APPARR
	local ACTIVITY

	rm -rf "$BUILDPATH"
	mkdir -p "$BUILDPATH"
	cp -r "$PKGPATH"/android-project/* "$BUILDPATH"

	ln -s "$SDLPATH"/src "$BUILDPATH"/jni/SDL
	ln -s "$SDLPATH"/include "$BUILDPATH"/jni/SDL
	cp -r "$SDLPATH"/Android.mk "$BUILDPATH"/jni/SDL

	sed -i "s|org\.libsdl\.app|$APP|g" "$BUILDPATH"/AndroidManifest.xml
	sed -i "s|VERSIONCODE|$VERSIONCODE|g" "$BUILDPATH"/AndroidManifest.xml
	sed -i "s|VERSIONNAME|$VERSIONNAME|g" "$BUILDPATH"/AndroidManifest.xml

	# Make sources list
	cd "$PKGPATH"/src
	ls -1 -R cbase/*.c > "$BUILDPATH"/sources.list
	ls -1 -R kernel/*.c >> "$BUILDPATH"/sources.list
	ls -1 -R gamelib/*.c >> "$BUILDPATH"/sources.list
	ls -1 -R libxmp-lite/*.c >> "$BUILDPATH"/sources.list
	ls -1 -R game/*.c >> "$BUILDPATH"/sources.list
	cd "$BASEPATH"

	while read -r line; do
		name="$line"
		sources="$sources $name"
	done < "$BUILDPATH"/sources.list

	sed -i "s|YourSourceHere.c|$sources|g" "$BUILDPATH"/jni/src/Android.mk
	sed -i "s|FullOrDemo|$DEMOPP|g" "$BUILDPATH"/jni/src/Android.mk

	ln -s "$PKGPATH"/src/cfg "$BUILDPATH"/jni/src
	ln -s "$PKGPATH"/src/cbase "$BUILDPATH"/jni/src
	ln -s "$PKGPATH"/src/kernel "$BUILDPATH"/jni/src
	ln -s "$PKGPATH"/src/gamelib "$BUILDPATH"/jni/src
	ln -s "$PKGPATH"/src/libxmp-lite "$BUILDPATH"/jni/src
	ln -s "$PKGPATH"/src/game "$BUILDPATH"/jni/src

	APPARR=(${APP//./ })

	# Create an inherited Activity
	cd "$BUILDPATH"/src
	for folder in "${APPARR[@]}"
	do
	    mkdir -p $folder
	    cd $folder
	done

	ACTIVITY="${folder}Activity"
	# Upper case first letter
	ACTIVITY="$(tr '[:lower:]' '[:upper:]' <<< ${ACTIVITY:0:1})${ACTIVITY:1}"

	sed -i "s|SDLActivity|$ACTIVITY|g" "$BUILDPATH"/AndroidManifest.xml
	sed -i "s|SDLActivity|$APP|g" "$BUILDPATH"/build.xml
	sed -i "s|SDL App|$APPNAME|g" "$BUILDPATH"/res/values/strings.xml
	sed -i "s|APPID|$APPID|g" "$BUILDPATH"/res/values/strings.xml

	# Fill in a default Activity
	echo "package $APP;" > "$ACTIVITY.java"
	echo "import org.libsdl.app.SDLActivity;" >> "$ACTIVITY.java"
	echo "public class $ACTIVITY extends SDLActivity {}" >> "$ACTIVITY.java"

	cd "$BASEPATH"

	# Update project
	cd "$BUILDPATH"
	"$ANDROID" update project --path "$BUILDPATH" --target $TARGET --subprojects
	cd "$BASEPATH"
}

demoize_data () {
	local buildd="$BUILDPATH"/assets/data

	cp "$PKGFILESDIR"/demo/init.txt "$buildd"
	cp "$PKGFILESDIR"/demo/i18.txt "$buildd"
	cp "$PKGFILESDIR"/demo/r18.txt "$buildd"
	cp "$PKGFILESDIR"/demo/i43.txt "$buildd"
	cp "$PKGFILESDIR"/demo/i44.txt "$buildd"
	cp "$PKGFILESDIR"/demo/r44.txt "$buildd"

	local here=`pwd`
	cd "$buildd"
	rm r1[0-2].txt i1[0-2].txt \
		r1[4-7].txt i1[4-7].txt \
		r20.txt i20.txt \
		r2[2-8].txt i2[2-8].txt
	rm demo_1[4-7].txt demo_19.txt demo_20.txt \
		demo_2[2-9].txt \
		demo_3?.txt demo_4?.txt
	rm r4[1-2].txt i4[1-2].txt
	rm bg10.txt bg18.txt
	rm bg20.txt bg28.txt
	rm bg42.txt
	mv demo_18.txt demo_14.txt
	mv demo_21.txt demo_15.txt
	rm lavashot.bmp lavashot.wav
	rm spider.bmp
	rm fish.bmp fishshot.bmp fishshot.wav
	rm end.bmp win.xm cavern.xm lava.xm
	cd "$here"
}

copy_icons () {
	local icond="$PKGPATH"/pkgfiles/android/icons
	local resd="$BUILDPATH"/res

	cp "$icond"/icon144$ICONSUFFIX.png \
		"$resd"/drawable-xxhdpi/ic_launcher.png
	cp "$icond"/icon96$ICONSUFFIX.png \
		"$resd"/drawable-xhdpi/ic_launcher.png
	cp "$icond"/icon72$ICONSUFFIX.png \
		"$resd"/drawable-hdpi/ic_launcher.png
	cp "$icond"/icon48$ICONSUFFIX.png \
		"$resd"/drawable-mdpi/ic_launcher.png
}

copy_data () {
	local fd
	local datad="$PKGPATH"/data
	local buildd="$BUILDPATH"/assets/data

	if [ ! -d $BUILDPATH ]; then
		echo "Can't find $BUILDPATH."
		return
	fi

	rm -rf "$buildd"
	mkdir -p "$buildd"

	for fd in "$datad"/*.bmp; do
		local f=`basename $fd`
		local origsize=$(stat -c%s $fd)
		local ncolors=$(identify -format %k $fd)
		convert $fd -colors $ncolors BMP3:"$buildd"/$f
		local newsize=$(stat -c%s "$buildd"/$f)
		local percent=`echo "$newsize*100/$origsize" | bc`
		if [ $newsize -lt $origsize ]; then
			echo "File $f (ncolors $ncolors) will be $percent% of original"
		else
			cp $fd "$buildd"
		fi
	done
	cp "$datad"/*.txt "$buildd"
	cp "$datad"/*.xm "$buildd"
	cp "$datad"/*.wav "$buildd"
	cp "$PKGFILESDIR"/android/*.txt "$buildd"

	if [ "$BUILDTYPE" = "demo" ]; then
		demoize_data
		cp "$PKGFILESDIR"/android/demo/*.txt "$buildd"
	fi

	copy_icons
}

# $1 debug or release
build () {
	local buildtype=$1

	cd "$BUILDPATH"
	"$NDKBUILD" -j $NCPUS $NDKARGS
	"$ANT" $buildtype
	cd "$BASEPATH"

	local APK="$BUILDPATH/bin/$APP-$buildtype.apk"

	if [ -f "$APK" ]; then
	    echo "Your APK is ready at $APK"
	    echo "To install to your device: "
	    echo "cd  $BUILDPATH"
	    echo "ant $buildtype install"
	else
	    echo "There was an error building the APK"
	fi
}

build_debug () {
	build debug
}

build_release () {
	local keystorep
	read -p "Enter the release keystore path (without ending /)? " keystorep
	local keystore="$keystorep"/keystore.jks
	if [ ! -f "$keystore" ]; then
		echo "Keystore file $keystore does not exist. Aborting."
		return
	fi
	mkdir -p "$BUILDPATH"/keystore
	cp "$keystore" "$BUILDPATH"/keystore/. 
	build release
}

install () {
    local buildtype=$1
    cd "$BUILDPATH"
    "$ANT" $buildtype install
    cd "$BASEPATH"
}

install_debug () {
	install debug
}

install_release () {
	install release
}

update_proj () {
	cd "$BUILDPATH"
	"$ANDROID" update lib-project --path "$BUILDPATH/google-play-services-base" --target $TARGET
	"$ANDROID" update lib-project --path "$BUILDPATH/google-play-services-tasks" --target $TARGET
	"$ANDROID" update lib-project --path "$BUILDPATH/google-play-services-basement" --target $TARGET
	"$ANDROID" update lib-project --path "$BUILDPATH/google-play-services-drive" --target $TARGET
	"$ANDROID" update lib-project --path "$BUILDPATH/google-play-services-games" --target $TARGET
	"$ANDROID" update lib-project --path "$BUILDPATH/android-support-v4" --target $TARGET
	"$ANDROID" update lib-project --path "$BUILDPATH/android-support-annotations" --target $TARGET
	"$ANDROID" update lib-project --path "$BUILDPATH/android-support-compat" --target $TARGET
	"$ANDROID" update lib-project --path "$BUILDPATH/android-support-core-ui" --target $TARGET
	"$ANDROID" update lib-project --path "$BUILDPATH/android-support-core-utils" --target $TARGET
	"$ANDROID" update lib-project --path "$BUILDPATH/android-support-fragment" --target $TARGET
	"$ANDROID" update lib-project --path "$BUILDPATH/android-support-media-compat" --target $TARGET
	"$ANDROID" update project --path "$BUILDPATH" --target $TARGET --library google-play-services-games
	cd "$BASEPATH"
}

show_menu () {
	echo "*********"
	echo " M E N U "
	echo "*********"
	echo "1. Recreate project skeleton in $BUILDPATH"
	echo "2. Copy assets from data/ and optimize BMPs into project"
	echo "3. Build debug"
	echo "4. Build release"
	echo "5. Install debug to device"
	echo "6. Install release to device"
	echo "7. Update project"
	echo "0. Exit"
}

read_option () {
	local choice
	echo -n "Select option: "
	read choice
	case $choice in
		1) make_project ;;
		2) copy_data ;;
		3) build_debug ;;
		4) build_release ;;
		5) install_debug ;;
		6) install_release ;;
		7) update_proj ;;
		0) exit 0 ;;
		*) echo "Wrong option" ;;
	esac
}

while true
do
	show_menu
	read_option
done
